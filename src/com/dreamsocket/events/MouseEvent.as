//Copyright (C) 2008 Dreamsocket, Inc. All Rights Reserved.
//The following document is subject to all restrictions on
//such code as contained in the End User License Agreement accompanying this product.


import com.dreamsocket.events.Event;

/**
 * The MouseEvent class is dispatched into the event flow whenever mouse events occur. 
 * A mouse event is usually generated by a user input device, such as a mouse or a trackball, that uses a pointer. 
 */
class com.dreamsocket.events.MouseEvent extends Event
{
	/**
	 * Defines the value of the type property of a click event object.
	 */
	public static var CLICK:String = "click";	
	
	/**
	 * Defines the value of the type property of a mouseDown event object.
	 */
	public static var MOUSE_DOWN:String = "mouseDown";	
	
	/**
	 * Defines the value of the type property of a mouseMove event object.
	 */
	public static var MOUSE_MOVE:String = "mouseMove";	
	
	/**
	 * Defines the value of the type property of a mouseOut event object.
	 */
	public static var MOUSE_OUT:String = "mouseOut";
	
	/**
	 * Defines the value of the type property of a mouseOver event object.
	 */	
	public static var MOUSE_OVER:String = "mouseOver";
	
	/**
	 * Defines the value of the type property of a mouseUp event object.
	 */	
	public static var MOUSE_UP:String = "mouseUp";	
	
	/**
	 * Defines the value of the type property of a mouseWheel event object.
	 */
	public static var MOUSE_WHEEL:String = "mouseWheel";
	
	/**
	 * Defines the value of the type property of a rollOut event object.
	 */	
	public static var ROLL_OUT:String = "rollOut";	
	
	/**
	 * Defines the value of the type property of a rollOver event object.
	 */
	public static var ROLL_OVER:String = "rollOver";	
	
		
	/** @private */
	private var m_relatedObject:MovieClip;
	/** @private */
	private var m_delta:Number;	
	
	
	public function MouseEvent(p_type:String, p_bubbles:Boolean)
	{	
		super(p_type, p_bubbles);
	}
	
	
	/**
	 * A reference to a display list object that is related to the event. 
	 * For example, when a mouseOut event occurs, relatedObject represents the display list object to which the pointing device now points. 
	 * This property applies to the mouseOut, mouseOver, rollOut, and rollOver events. 
	 */
	public function get relatedObject():MovieClip
	{
		return this.m_relatedObject;
	}
	
	
	public function set relatedObject(p_o:MovieClip):Void
	{
		this.m_relatedObject = p_o;
	}
	
	
	/**
	 * Indicates how many lines should be scrolled for each unit the user rotates the mouse wheel. 
	 * A positive delta value indicates an upward scroll; a negative value indicates a downward scroll. Typical values are 1 to 3, but faster rotation may produce larger values. This setting depends on the device and operating system and is usually configurable by the user. 
	 * This property applies only to the MouseEvent.mouseWheel event. 
	 */
	public function get delta():Number
	{
		return this.m_delta;
	}
	
	
	public function set delta(p_v:Number):Void
	{
		this.m_delta = p_v;
	}	
	
	
	/**
	 * Creates a copy of the MouseEvent object and sets the value of each property to match that of the original.
	 */
	public function clone():Event
	{
		var evt:MouseEvent = new MouseEvent(this.m_type, this.m_bubbles);
		
		evt.relatedObject = this.m_relatedObject;
		evt.delta = this.m_delta;
		
		return evt;
	}
	
	
	/**
	 * Returns a string that contains all the properties of the MouseEvent object.
	 */
	public function toString():String
	{
		return this.formatToString("MouseEvent", "type", "delta", "relatedObject", "bubbles", "eventPhase");	
	}		
}